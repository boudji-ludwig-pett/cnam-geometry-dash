@startuml GeometryDash - Diagramme de classe

skinparam style strictuml
skinparam classAttributeIconSize 0
skinparam classFontStyle Bold
hide enum methods

class GameManager {
  - currentLevel: Level
  - score: int
  - isPaused: Boolean
  + StartGame()
  + LoadLevel(level: Level)
  + RestartLevel()
  + PauseGame()
  + ResumeGame()
  + UpdateScore(points: int)
}

class Level {
  - name: String
  - musicPath: String
  - elements: List<LevelElement>
  - difficulty: int
  - timeLimit: float
  + StartLevel()
  + EndLevel()
  + CheckCompletion(): Boolean
}

abstract class LevelElement {
  - x: Float
  - y: Float
  - type: ElementType
}

enum ElementType {
  Platform, Spike, Portal, Bumper, LevelEnd, MovingPlatform, Collectible
}

abstract class Obstacle extends LevelElement {
  - isDeadly: Boolean
  + TriggerEffect(player: Player)
}

class Platform extends LevelElement {
  - isMoving: Boolean
  - speed: Float
  + Move()
}

class MovingPlatform extends Platform {
  - path: List<Vector2>
  + FollowPath()
}

class Spike extends Obstacle {
  - isDeadly = true
  + TriggerEffect(player: Player)
}

class Portal extends LevelElement {
  - destination: Vector2
  - type: PortalType
  + Teleport(player: Player)
}

enum PortalType {
  Normal, Gravity, Speed
}

class Bumper extends LevelElement {
  - bounceForce: Float
  + Bounce(player: Player)
}

class LevelEnd extends LevelElement {
  + TriggerEndGame()
}

class Collectible extends LevelElement {
  - points: int
  + Collect(player: Player)
}

class Player {
  - JUMP_FORCE: static const Float = 26.6581
  - SPEED: static const Float = 8.6
  - rigidBody: Rigidbody2D
  - isColliding: Boolean
  - isGrounded: Boolean
  - gravityScale: Float
  + Jump()
  + IsJumping(): Boolean
  + OnCollisionEnter2D(collision: Collision2D)
  + OnCollisionExit2D(collision: Collision2D)
  + ChangeGravity()
  + Die()
  + Respawn()
  + CollectItem(item: Collectible)
}

class LevelLoader {
  + LoadLevel(jsonPath: String): Level
  + UnloadLevel(level: Level)
}

class LevelParser {
  + ParseJSON(jsonData: String): Level
}

class MusicManager {
  - currentTrack: String
  - volume: Float
  + PlayMusic(musicPath: String)
  + StopMusic()
  + SetVolume(level: Float)
}

GameManager *--> Level : <<Manages>>
GameManager --> Level : <<Has>>
Level *--> LevelElement : <<Owns>>
GameManager *--> Player : <<Owns>>
LevelLoader --> Level : <<Creates>>
LevelLoader --> LevelParser : <<Uses>>
GameManager --> MusicManager : <<Controls>>
Player --> LevelEnd : <<Triggers>>
Player --> Portal : <<Interacts>>
Player --> Collectible : <<Collects>>
Obstacle --> Player : <<Affects>>
MovingPlatform --> Platform : <<Extends>>
GameManager --> Level : <<Contains>>

@enduml
